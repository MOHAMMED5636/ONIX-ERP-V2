// Generate unique ID
export const generateId = () => {
  return Date.now();
};

// Format file size
export const formatFileSize = (bytes) => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
};

// Handle file download
export const handleDownload = (policy) => {
  // Create a mock file content based on policy
  const fileContent = `
${policy.title}
${'='.repeat(policy.title.length)}

Description: ${policy.description}
File Type: ${policy.fileType}
File Size: ${policy.fileSize}
Last Updated: ${policy.lastUpdated}
Status: ${policy.status}
${policy.status === 'acknowledged' ? `Acknowledged On: ${policy.acknowledgedAt}` : ''}

POLICY CONTENT:
This is a sample content for the ${policy.title}. In a real application, this would contain the actual policy document content.

Key Points:
• This policy outlines important guidelines and procedures
• All employees must review and acknowledge this policy
• Regular updates are made to ensure compliance
• Contact HR for any questions or clarifications

Effective Date: ${policy.lastUpdated}
Review Date: ${new Date(new Date(policy.lastUpdated).getTime() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}

---
Generated by Company Policy Management System
  `.trim();

  // Create blob and download
  const blob = new Blob([fileContent], { type: 'text/plain' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${policy.title.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  window.URL.revokeObjectURL(url);
};

// Filter policies based on search term and filters
export const filterPolicies = (policies, searchTerm, filterStatus, filterDepartment) => {
  return policies.filter(policy => {
    const matchesSearch = policy.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         policy.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         policy.department.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || policy.status === filterStatus;
    const matchesDepartment = filterDepartment === 'all' || policy.department === filterDepartment;
    
    return matchesSearch && matchesStatus && matchesDepartment;
  });
};

// Get policy statistics
export const getPolicyStats = (policies) => {
  const total = policies.length;
  const pending = policies.filter(policy => policy.status === 'pending').length;
  const acknowledged = policies.filter(policy => policy.status === 'acknowledged').length;
  
  return {
    total,
    pending,
    acknowledged,
    pendingPercentage: total > 0 ? Math.round((pending / total) * 100) : 0,
    acknowledgedPercentage: total > 0 ? Math.round((acknowledged / total) * 100) : 0
  };
};

// Validate new policy data
export const validateNewPolicy = (newPolicy) => {
  const errors = [];
  
  if (!newPolicy.title.trim()) {
    errors.push('Policy title is required');
  }
  
  if (!newPolicy.description.trim()) {
    errors.push('Policy description is required');
  }
  
  if (!newPolicy.department.trim()) {
    errors.push('Department is required');
  }
  
  return errors;
};

// Validate new department data
export const validateNewDepartment = (newDepartment, existingDepartments) => {
  const errors = [];
  
  if (!newDepartment.name.trim()) {
    errors.push('Department name is required');
  }
  
  if (existingDepartments.includes(newDepartment.name)) {
    errors.push('Department already exists');
  }
  
  return errors;
};

// Create new policy object
export const createNewPolicy = (newPolicy) => {
  return {
    id: generateId(),
    title: newPolicy.title,
    description: newPolicy.description,
    department: newPolicy.department,
    fileType: newPolicy.file ? newPolicy.file.name.split('.').pop().toUpperCase() : 'PDF',
    fileSize: newPolicy.file ? formatFileSize(newPolicy.file.size) : '1.0 MB',
    lastUpdated: new Date().toISOString().split('T')[0],
    status: 'pending'
  };
};

// Acknowledge policy
export const acknowledgePolicy = (policies, policyId) => {
  return policies.map(policy => 
    policy.id === policyId 
      ? { ...policy, status: 'acknowledged', acknowledgedAt: new Date().toISOString().split('T')[0] }
      : policy
  );
};

// Delete policy
export const deletePolicy = (policies, policyId) => {
  return policies.filter(policy => policy.id !== policyId);
};

// Check if department can be deleted
export const canDeleteDepartment = (departmentName, policies) => {
  if (departmentName === "All Departments") {
    return { canDelete: false, reason: "Cannot delete 'All Departments'" };
  }

  const policiesUsingDepartment = policies.filter(policy => policy.department === departmentName);
  if (policiesUsingDepartment.length > 0) {
    return { 
      canDelete: false, 
      reason: `Cannot delete department. ${policiesUsingDepartment.length} policy(ies) are using this department.` 
    };
  }

  return { canDelete: true };
};

// Get status color
export const getStatusColor = (status) => {
  switch (status) {
    case 'acknowledged':
      return 'text-green-600 bg-green-50 border-green-200';
    case 'pending':
      return 'text-amber-600 bg-amber-50 border-amber-200';
    default:
      return 'text-gray-600 bg-gray-50 border-gray-200';
  }
};

// Get status icon
export const getStatusIcon = (status) => {
  switch (status) {
    case 'acknowledged':
      return 'CheckCircleIcon';
    case 'pending':
      return 'ClockIcon';
    default:
      return 'DocumentIcon';
  }
};

// Get file type color
export const getFileTypeColor = (fileType) => {
  switch (fileType) {
    case 'PDF':
      return 'bg-red-100 text-red-800';
    case 'DOCX':
      return 'bg-blue-100 text-blue-800';
    case 'XLSX':
      return 'bg-green-100 text-green-800';
    case 'PPTX':
      return 'bg-orange-100 text-orange-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};
