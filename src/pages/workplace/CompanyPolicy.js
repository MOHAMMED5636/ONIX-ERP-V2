import React, { useState, useEffect } from "react";
import { 
  DocumentTextIcon, 
  EyeIcon, 
  ArrowDownTrayIcon, 
  CheckCircleIcon,
  PlusIcon,
  TrashIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  DocumentIcon,
  ClockIcon,
  ExclamationTriangleIcon
} from "@heroicons/react/24/outline";

export default function CompanyPolicy() {
  const [policies, setPolicies] = useState([
    {
      id: 1,
      title: "Employee Handbook 2024",
      description: "Comprehensive guide covering company policies, procedures, and employee rights",
      department: "HR",
      fileType: "PDF",
      fileSize: "2.5 MB",
      lastUpdated: "2024-01-15",
      status: "acknowledged",
      acknowledgedAt: "2024-01-20"
    },
    {
      id: 2,
      title: "Data Protection Policy",
      description: "Guidelines for handling sensitive company and customer data",
      department: "IT",
      fileType: "PDF",
      fileSize: "1.8 MB",
      lastUpdated: "2024-02-01",
      status: "pending"
    },
    {
      id: 3,
      title: "Remote Work Guidelines",
      description: "Policies and procedures for remote work arrangements",
      department: "HR",
      fileType: "DOCX",
      fileSize: "950 KB",
      lastUpdated: "2024-01-30",
      status: "acknowledged",
      acknowledgedAt: "2024-02-05"
    },
    {
      id: 4,
      title: "Health and Safety Protocol",
      description: "Workplace safety guidelines and emergency procedures",
      department: "Operations",
      fileType: "PDF",
      fileSize: "3.2 MB",
      lastUpdated: "2024-02-10",
      status: "pending"
    }
  ]);

  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [filterDepartment, setFilterDepartment] = useState("all");
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [showCreateDepartmentModal, setShowCreateDepartmentModal] = useState(false);
  const [selectedPolicy, setSelectedPolicy] = useState(null);
  const [policyToView, setPolicyToView] = useState(null);
  const [departments, setDepartments] = useState([
    "HR", "IT", "Finance", "Sales", "Marketing", "Operations", 
    "Legal", "Customer Support", "Research & Development", "All Departments"
  ]);
  const [newDepartment, setNewDepartment] = useState({
    name: '',
    description: '',
    manager: ''
  });
  const [newPolicy, setNewPolicy] = useState({
    title: '',
    description: '',
    department: '',
    file: null
  });
  const [selectedDepartments, setSelectedDepartments] = useState([]);
  const [departmentError, setDepartmentError] = useState('');

  const handleAcknowledge = (policyId) => {
    setPolicies(prev => prev.map(policy => 
      policy.id === policyId 
        ? { ...policy, status: 'acknowledged', acknowledgedAt: new Date().toISOString().split('T')[0] }
        : policy
    ));
  };

  const handleView = (policy) => {
    setPolicyToView(policy);
    setShowViewModal(true);
  };

  const handleDownload = (policy) => {
    // Create a mock file content based on policy
    const fileContent = `
${policy.title}
${'='.repeat(policy.title.length)}

Description: ${policy.description}
File Type: ${policy.fileType}
File Size: ${policy.fileSize}
Last Updated: ${policy.lastUpdated}
Status: ${policy.status}
${policy.status === 'acknowledged' ? `Acknowledged On: ${policy.acknowledgedAt}` : ''}

POLICY CONTENT:
This is a sample content for the ${policy.title}. In a real application, this would contain the actual policy document content.

Key Points:
• This policy outlines important guidelines and procedures
• All employees must review and acknowledge this policy
• Regular updates are made to ensure compliance
• Contact HR for any questions or clarifications

Effective Date: ${policy.lastUpdated}
Review Date: ${new Date(new Date(policy.lastUpdated).getTime() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}

---
Generated by Company Policy Management System
    `.trim();

    // Create blob and download
    const blob = new Blob([fileContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${policy.title.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const handleCreatePolicy = () => {
    // Clear previous error
    setDepartmentError('');
    
    if (!newPolicy.title.trim() || !newPolicy.description.trim()) {
      alert("Please fill in all required fields");
      return;
    }

    // Validate department selection
    if (selectedDepartments.length === 0) {
      setDepartmentError('Please select at least one department');
      return;
    }

    const newPolicyObj = {
      id: Date.now(),
      title: newPolicy.title,
      description: newPolicy.description,
      department: selectedDepartments.join(', '), // Join multiple departments
      fileType: newPolicy.file ? newPolicy.file.name.split('.').pop().toUpperCase() : 'PDF',
      fileSize: newPolicy.file ? `${(newPolicy.file.size / 1024 / 1024).toFixed(1)} MB` : '1.0 MB',
      lastUpdated: new Date().toISOString().split('T')[0],
      status: 'pending'
    };

    setPolicies(prev => [newPolicyObj, ...prev]);
    setNewPolicy({ title: '', description: '', department: '', file: null });
    setSelectedDepartments([]);
    setDepartmentError('');
    setShowCreateModal(false);
  };

  const handleDeletePolicy = () => {
    if (selectedPolicy) {
      setPolicies(prev => prev.filter(policy => policy.id !== selectedPolicy.id));
      setShowDeleteModal(false);
      setSelectedPolicy(null);
    }
  };

  const handleCreateDepartment = () => {
    if (!newDepartment.name.trim()) {
      alert("Please enter a department name");
      return;
    }

    if (departments.includes(newDepartment.name)) {
      alert("Department already exists");
      return;
    }

    setDepartments(prev => [...prev, newDepartment.name]);
    setNewDepartment({ name: '', description: '', manager: '' });
    setShowCreateDepartmentModal(false);
  };

  const handleDeleteDepartment = (departmentName) => {
    if (departmentName === "All Departments") {
      alert("Cannot delete 'All Departments'");
      return;
    }

    // Check if any policies are using this department
    const policiesUsingDepartment = policies.filter(policy => policy.department === departmentName);
    if (policiesUsingDepartment.length > 0) {
      alert(`Cannot delete department. ${policiesUsingDepartment.length} policy(ies) are using this department.`);
      return;
    }

    setDepartments(prev => prev.filter(dept => dept !== departmentName));
  };

  const handleDepartmentToggle = (department) => {
    setSelectedDepartments(prev => {
      if (prev.includes(department)) {
        return prev.filter(dept => dept !== department);
      } else {
        return [...prev, department];
      }
    });
    // Clear error when user makes a selection
    if (departmentError) {
      setDepartmentError('');
    }
  };

  const filteredPolicies = policies.filter(policy => {
    const matchesSearch = policy.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         policy.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = filterStatus === "all" || policy.status === filterStatus;
    const matchesDepartment = filterDepartment === "all" || policy.department === filterDepartment;
    return matchesSearch && matchesStatus && matchesDepartment;
  });

  const getStatusColor = (status) => {
    switch (status) {
      case 'acknowledged': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getFileTypeColor = (fileType) => {
    switch (fileType) {
      case 'PDF': return 'bg-red-100 text-red-800';
      case 'DOCX': return 'bg-blue-100 text-blue-800';
      case 'XLSX': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const acknowledgedCount = policies.filter(p => p.status === 'acknowledged').length;
  const pendingCount = policies.filter(p => p.status === 'pending').length;
  const totalPolicies = policies.length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Enhanced Header */}
        <div className="mb-8">
          <div className="flex items-center gap-4 mb-4">
            <div className="p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl shadow-lg">
              <DocumentTextIcon className="h-8 w-8 text-white" />
            </div>
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                Company Policies
              </h1>
              <p className="text-gray-600 mt-1">Manage and acknowledge company policies and procedures</p>
            </div>
          </div>
          
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Policies</p>
                  <p className="text-2xl font-bold text-gray-900">{totalPolicies}</p>
                </div>
                <div className="p-2 bg-indigo-100 rounded-lg">
                  <DocumentTextIcon className="h-6 w-6 text-indigo-600" />
                </div>
              </div>
            </div>
            <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Acknowledged</p>
                  <p className="text-2xl font-bold text-green-600">{acknowledgedCount}</p>
                </div>
                <div className="p-2 bg-green-100 rounded-lg">
                  <CheckCircleIcon className="h-6 w-6 text-green-600" />
                </div>
              </div>
            </div>
            <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Pending</p>
                  <p className="text-2xl font-bold text-yellow-600">{pendingCount}</p>
                </div>
                <div className="p-2 bg-yellow-100 rounded-lg">
                  <ExclamationTriangleIcon className="h-6 w-6 text-yellow-600" />
                </div>
              </div>
            </div>
            <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Completion Rate</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {totalPolicies > 0 ? Math.round((acknowledgedCount / totalPolicies) * 100) : 0}%
                  </p>
                </div>
                <div className="p-2 bg-purple-100 rounded-lg">
                  <div className="h-6 w-6 bg-purple-500 rounded-full"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Action Bar */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
          <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
            <div className="flex flex-col sm:flex-row gap-4 flex-1">
              {/* Search */}
              <div className="relative flex-1 max-w-md">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search policies..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>
              
                             {/* Status Filter */}
               <div className="relative">
                 <FunnelIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                 <select
                   value={filterStatus}
                   onChange={(e) => setFilterStatus(e.target.value)}
                   className="pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 appearance-none bg-white"
                 >
                   <option value="all">All Status</option>
                   <option value="acknowledged">Acknowledged</option>
                   <option value="pending">Pending</option>
                 </select>
               </div>
               
                               {/* Department Filter */}
                <div className="relative">
                  <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                  <select
                    value={filterDepartment}
                    onChange={(e) => setFilterDepartment(e.target.value)}
                    className="pl-10 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 appearance-none bg-white"
                  >
                    <option value="all">All Departments</option>
                    {departments.map(dept => (
                      <option key={dept} value={dept}>{dept}</option>
                    ))}
                  </select>
                </div>
            </div>
            
                         <div className="flex items-center gap-3">
               {/* Create Department Button */}
               <button
                 onClick={() => setShowCreateDepartmentModal(true)}
                 className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-lg transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
               >
                 <svg className="h-5 w-5 mr-2" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                   <path strokeLinecap="round" strokeLinejoin="round" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                 </svg>
                 Create Department
               </button>
               {/* Create Policy Button */}
               <button
                 onClick={() => setShowCreateModal(true)}
                 className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white rounded-lg transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
               >
                 <PlusIcon className="h-5 w-5 mr-2" />
                 Create New Policy
               </button>
             </div>
          </div>
        </div>

        {/* Policies Content */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredPolicies.map((policy) => (
            <div
              key={policy.id}
              className="bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 group"
            >
              {/* Card Header */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-gray-900 mb-2 group-hover:text-indigo-600 transition-colors">
                      {policy.title}
                    </h3>
                                         <div className="flex items-center gap-2 mb-3">
                       <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getFileTypeColor(policy.fileType)}`}>
                         {policy.fileType}
                       </span>
                       <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                         {policy.department}
                       </span>
                       <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(policy.status)}`}>
                         {policy.status === 'acknowledged' ? 'Acknowledged' : 'Pending'}
                       </span>
                     </div>
                    <p className="text-sm text-gray-600 line-clamp-2">{policy.description}</p>
                  </div>
                </div>
                
                {/* Policy Stats */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-3 bg-gray-50 rounded-lg">
                    <p className="text-sm font-bold text-gray-900">{policy.fileSize}</p>
                    <p className="text-xs text-gray-600">File Size</p>
                  </div>
                  <div className="text-center p-3 bg-gray-50 rounded-lg">
                    <p className="text-sm font-bold text-gray-900">{policy.lastUpdated}</p>
                    <p className="text-xs text-gray-600">Last Updated</p>
                  </div>
                </div>
                
                {/* Acknowledgment Status */}
                {policy.status === 'acknowledged' && (
                  <div className="mt-4 p-3 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-100">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-xs font-medium text-gray-600">Acknowledged On</p>
                        <p className="text-sm font-semibold text-gray-900">{policy.acknowledgedAt}</p>
                      </div>
                      <CheckCircleIcon className="h-5 w-5 text-green-600" />
                    </div>
                  </div>
                )}
              </div>
              
              {/* Card Body */}
              <div className="p-6">
                {/* Actions */}
                <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                  <div className="flex items-center gap-2">
                    <button 
                      onClick={() => handleView(policy)}
                      className="p-2 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                      title="View Policy"
                    >
                      <EyeIcon className="h-4 w-4" />
                    </button>
                    <button 
                      onClick={() => handleDownload(policy)}
                      className="p-2 text-gray-400 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                      title="Download Policy"
                    >
                      <ArrowDownTrayIcon className="h-4 w-4" />
                    </button>
                    <button 
                      onClick={() => {
                        setSelectedPolicy(policy);
                        setShowDeleteModal(true);
                      }}
                      className="p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                      title="Delete Policy"
                    >
                      <TrashIcon className="h-4 w-4" />
                    </button>
                  </div>
                  <div className="flex items-center gap-2">
                    {policy.status === 'pending' && (
                      <button 
                        onClick={() => handleAcknowledge(policy.id)}
                        className="px-3 py-1 bg-indigo-100 text-indigo-700 rounded-md text-sm font-medium hover:bg-indigo-200 transition-colors"
                      >
                        Acknowledge
                      </button>
                    )}
                    {policy.status === 'acknowledged' && (
                      <div className="flex items-center gap-1 text-green-600">
                        <CheckCircleIcon className="h-4 w-4" />
                        <span className="text-sm font-medium">Acknowledged</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Empty State */}
        {filteredPolicies.length === 0 && (
          <div className="text-center py-12">
            <div className="mx-auto h-24 w-24 text-gray-300 mb-4">
              <DocumentTextIcon className="h-full w-full" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">No policies found</h3>
                         <p className="text-gray-500 mb-6">
               {searchTerm || filterStatus !== "all" || filterDepartment !== "all"
                 ? "Try adjusting your search or filter criteria."
                 : "Get started by creating your first company policy."
               }
             </p>
             {!searchTerm && filterStatus === "all" && filterDepartment === "all" && (
              <button
                onClick={() => setShowCreateModal(true)}
                className="inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Create Policy
              </button>
            )}
          </div>
        )}
      </div>

      {/* Create Policy Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold text-gray-900">Create New Policy</h2>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setSelectedDepartments([]);
                  setDepartmentError('');
                }}
                className="text-gray-400 hover:text-gray-600 text-2xl font-bold"
              >
                ×
              </button>
            </div>
            
                         <div className="space-y-4">
               <div>
                 <label className="block text-sm font-medium text-gray-700 mb-2">
                   Policy Title *
                 </label>
                 <input
                   type="text"
                   value={newPolicy.title}
                   onChange={(e) => setNewPolicy(prev => ({ ...prev, title: e.target.value }))}
                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                   placeholder="Enter policy title"
                 />
               </div>
               
               <div>
                 <label className="block text-sm font-medium text-gray-700 mb-2">
                   Departments *
                 </label>
                 <div className="max-h-48 overflow-y-auto border border-gray-300 rounded-lg p-3 bg-white">
                   {departments.map(dept => (
                     <div key={dept} className="flex items-center mb-2 last:mb-0">
                       <input
                         type="checkbox"
                         id={`dept-${dept}`}
                         checked={selectedDepartments.includes(dept)}
                         onChange={() => handleDepartmentToggle(dept)}
                         className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                       />
                       <label htmlFor={`dept-${dept}`} className="ml-2 text-sm text-gray-700 cursor-pointer">
                         {dept}
                       </label>
                     </div>
                   ))}
                 </div>
                 {selectedDepartments.length > 0 && (
                   <div className="mt-2">
                     <p className="text-xs text-gray-600">Selected: {selectedDepartments.join(', ')}</p>
                   </div>
                 )}
                 {departmentError && (
                   <p className="mt-1 text-sm text-red-600">{departmentError}</p>
                 )}
               </div>
               
               <div>
                 <label className="block text-sm font-medium text-gray-700 mb-2">
                   Description *
                 </label>
                 <textarea
                   value={newPolicy.description}
                   onChange={(e) => setNewPolicy(prev => ({ ...prev, description: e.target.value }))}
                   rows={3}
                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 resize-none"
                   placeholder="Enter policy description"
                 />
               </div>
               
               <div>
                 <label className="block text-sm font-medium text-gray-700 mb-2">
                   Policy File
                 </label>
                 <input
                   type="file"
                   onChange={(e) => setNewPolicy(prev => ({ ...prev, file: e.target.files[0] }))}
                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                   accept=".pdf,.doc,.docx"
                 />
               </div>
             </div>
            
            <div className="flex justify-end space-x-3 mt-6 pt-6 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setSelectedDepartments([]);
                  setDepartmentError('');
                }}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleCreatePolicy}
                className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
              >
                Create Policy
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && selectedPolicy && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold text-gray-900">Delete Policy</h2>
              <button
                onClick={() => setShowDeleteModal(false)}
                className="text-gray-400 hover:text-gray-600 text-2xl font-bold"
              >
                ×
              </button>
            </div>
            
            <p className="text-gray-600 mb-6">
              Are you sure you want to delete "{selectedPolicy.title}"? This action cannot be undone.
            </p>
            
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setShowDeleteModal(false)}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleDeletePolicy}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

      {/* View Policy Modal */}
      {showViewModal && policyToView && (
        <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
            {/* Header */}
            <div className="relative overflow-hidden">
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600"></div>
              <div className="absolute inset-0 bg-black bg-opacity-20"></div>
              <div className="relative flex items-center justify-between p-6 text-white">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-white bg-opacity-20 rounded-2xl backdrop-blur-sm">
                    <DocumentTextIcon className="h-7 w-7" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold">Policy Details</h3>
                    <p className="text-indigo-100 text-sm font-medium">{policyToView.title}</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowViewModal(false)}
                  className="p-3 hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-200 hover:scale-110"
                >
                  <svg className="h-6 w-6" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
              {/* Policy Header */}
              <div className="mb-8">
                <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl p-6 border border-indigo-100 shadow-sm">
                  <div className="flex items-center gap-4">
                    <div className="p-4 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl shadow-lg">
                      <DocumentTextIcon className="h-8 w-8 text-white" />
                    </div>
                                         <div className="flex-1">
                       <h4 className="text-xl font-bold text-gray-900 mb-1">{policyToView.title}</h4>
                       <p className="text-gray-600 mb-2">{policyToView.description}</p>
                       <div className="flex items-center gap-4 text-sm">
                         <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                           {policyToView.department}
                         </span>
                         <span className={`px-3 py-1 rounded-full font-medium ${getStatusColor(policyToView.status)}`}>
                           {policyToView.status === 'acknowledged' ? 'Acknowledged' : 'Pending'}
                         </span>
                         <span className="text-gray-500">ID: {policyToView.id}</span>
                       </div>
                     </div>
                  </div>
                </div>
              </div>

              {/* Policy Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                {/* File Information */}
                <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg">
                      <DocumentIcon className="h-5 w-5 text-white" />
                    </div>
                    <h5 className="text-lg font-bold text-gray-900">File Information</h5>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">File Type</label>
                      <span className={`inline-flex px-3 py-1 text-sm font-semibold rounded-full ${getFileTypeColor(policyToView.fileType)}`}>
                        {policyToView.fileType}
                      </span>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">File Size</label>
                      <p className="text-gray-900 font-medium">{policyToView.fileSize}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Last Updated</label>
                      <p className="text-gray-900 font-medium">{policyToView.lastUpdated}</p>
                    </div>
                  </div>
                </div>

                {/* Status Information */}
                <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="p-2 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg">
                      <ClockIcon className="h-5 w-5 text-white" />
                    </div>
                    <h5 className="text-lg font-bold text-gray-900">Status Information</h5>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Current Status</label>
                      <span className={`inline-flex px-3 py-1 text-sm font-semibold rounded-full ${getStatusColor(policyToView.status)}`}>
                        {policyToView.status === 'acknowledged' ? 'Acknowledged' : 'Pending'}
                      </span>
                    </div>
                    {policyToView.status === 'acknowledged' && (
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Acknowledged On</label>
                        <p className="text-gray-900 font-medium">{policyToView.acknowledgedAt}</p>
                      </div>
                    )}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Policy ID</label>
                      <p className="text-gray-900 font-medium">#{policyToView.id}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Policy Content Preview */}
              <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm">
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg">
                    <EyeIcon className="h-5 w-5 text-white" />
                  </div>
                  <h5 className="text-lg font-bold text-gray-900">Policy Content Preview</h5>
                </div>
                <div className="bg-gray-50 rounded-xl p-6 border border-gray-200">
                  <div className="prose max-w-none">
                    <h3 className="text-lg font-bold text-gray-900 mb-4">{policyToView.title}</h3>
                    <p className="text-gray-700 mb-4">{policyToView.description}</p>
                    
                    <div className="bg-white rounded-lg p-4 border border-gray-200">
                      <h4 className="font-semibold text-gray-900 mb-2">Sample Policy Content:</h4>
                      <p className="text-gray-600 text-sm leading-relaxed">
                        This is a preview of the {policyToView.title}. In a real application, this would display the actual policy document content, including all sections, guidelines, and procedures that employees need to follow.
                      </p>
                      <p className="text-gray-600 text-sm leading-relaxed mt-3">
                        The policy covers important aspects such as workplace conduct, data protection, health and safety protocols, and compliance requirements. All employees are required to review and acknowledge this policy to ensure understanding and compliance.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="p-6 bg-gradient-to-r from-gray-50 to-gray-100 border-t border-gray-200">
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-600">
                  <span className="font-semibold">Policy ID:</span> #{policyToView.id}
                </div>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => handleDownload(policyToView)}
                    className="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl font-semibold hover:from-green-600 hover:to-emerald-600 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                  >
                    📥 Download Policy
                  </button>
                  {policyToView.status === 'pending' && (
                    <button
                      onClick={() => {
                        handleAcknowledge(policyToView.id);
                        setShowViewModal(false);
                      }}
                      className="px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-xl font-semibold hover:from-indigo-600 hover:to-purple-600 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                    >
                      ✅ Acknowledge Policy
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
                 </div>
       )}

       {/* Create Department Modal */}
       {showCreateDepartmentModal && (
         <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
           <div className="bg-white rounded-3xl shadow-2xl w-full max-w-md overflow-hidden">
             {/* Header */}
             <div className="relative overflow-hidden">
               <div className="absolute inset-0 bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600"></div>
               <div className="absolute inset-0 bg-black bg-opacity-20"></div>
               <div className="relative flex items-center justify-between p-6 text-white">
                 <div className="flex items-center gap-4">
                   <div className="p-3 bg-white bg-opacity-20 rounded-2xl backdrop-blur-sm">
                     <svg className="h-7 w-7" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                       <path strokeLinecap="round" strokeLinejoin="round" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                     </svg>
                   </div>
                   <div>
                     <h3 className="text-xl font-bold">Create New Department</h3>
                     <p className="text-green-100 text-sm font-medium">Add a new department to the organization</p>
                   </div>
                 </div>
                 <button
                   onClick={() => setShowCreateDepartmentModal(false)}
                   className="p-3 hover:bg-white hover:bg-opacity-20 rounded-xl transition-all duration-200 hover:scale-110"
                 >
                   <svg className="h-6 w-6" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                     <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                   </svg>
                 </button>
               </div>
             </div>

             {/* Content */}
             <div className="p-6">
               <div className="space-y-6">
                 {/* Department Name */}
                 <div>
                   <label className="block text-sm font-medium text-gray-700 mb-2">
                     Department Name *
                   </label>
                   <input
                     type="text"
                     value={newDepartment.name}
                     onChange={(e) => setNewDepartment(prev => ({ ...prev, name: e.target.value }))}
                     className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                     placeholder="Enter department name"
                   />
                 </div>

                 {/* Department Description */}
                 <div>
                   <label className="block text-sm font-medium text-gray-700 mb-2">
                     Description
                   </label>
                   <textarea
                     value={newDepartment.description}
                     onChange={(e) => setNewDepartment(prev => ({ ...prev, description: e.target.value }))}
                     rows={3}
                     className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                     placeholder="Enter department description"
                   />
                 </div>

                 {/* Department Manager */}
                 <div>
                   <label className="block text-sm font-medium text-gray-700 mb-2">
                     Department Manager
                   </label>
                   <input
                     type="text"
                     value={newDepartment.manager}
                     onChange={(e) => setNewDepartment(prev => ({ ...prev, manager: e.target.value }))}
                     className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                     placeholder="Enter manager name"
                   />
                 </div>

                 {/* Existing Departments */}
                 <div>
                   <label className="block text-sm font-medium text-gray-700 mb-3">
                     Existing Departments
                   </label>
                   <div className="bg-gray-50 rounded-xl p-4 max-h-32 overflow-y-auto">
                     <div className="grid grid-cols-2 gap-2">
                       {departments.map(dept => (
                         <div key={dept} className="flex items-center justify-between p-2 bg-white rounded-lg border border-gray-200">
                           <span className="text-sm font-medium text-gray-700">{dept}</span>
                           {dept !== "All Departments" && (
                             <button
                               onClick={() => handleDeleteDepartment(dept)}
                               className="p-1 text-red-500 hover:bg-red-50 rounded transition-colors"
                               title="Delete Department"
                             >
                               <svg className="h-4 w-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                                 <path strokeLinecap="round" strokeLinejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                               </svg>
                             </button>
                           )}
                         </div>
                       ))}
                     </div>
                   </div>
                 </div>
               </div>
             </div>

             {/* Footer */}
             <div className="p-6 bg-gradient-to-r from-gray-50 to-gray-100 border-t border-gray-200">
               <div className="flex items-center justify-between">
                 <div className="text-sm text-gray-600">
                   <span className="font-semibold">Total Departments:</span> {departments.length}
                 </div>
                 <div className="flex items-center gap-3">
                   <button
                     onClick={() => setShowCreateDepartmentModal(false)}
                     className="px-6 py-3 text-gray-600 hover:text-gray-800 transition-colors font-semibold border border-gray-300 rounded-xl hover:bg-gray-50"
                   >
                     Cancel
                   </button>
                   <button
                     onClick={handleCreateDepartment}
                     className="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl font-semibold hover:from-green-600 hover:to-emerald-600 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
                   >
                     ✅ Create Department
                   </button>
                 </div>
               </div>
             </div>
           </div>
         </div>
       )}
     </div>
   );
 } 