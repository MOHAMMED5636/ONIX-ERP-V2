// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  avatar    String?
  phone     String?
  department String?
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTasks     Task[]     @relation("TaskAssignee")
  createdTasks      Task[]     @relation("TaskCreator")
  notifications     Notification[]
  chatMessages      ChatMessage[]
  chatRooms         ChatRoom[] @relation("ChatRoomMembers")
  createdCompanies  Company[]  @relation("CompanyCreator")
  createdClients    Client[]   @relation("ClientCreator")
  documents         Document[]
  leaveRequests     LeaveRequest[]
  evaluations       EmployeeEvaluation[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  HR_MANAGER
  EMPLOYEE
  CLIENT
}

// Company Management
model Company {
  id              String   @id @default(cuid())
  name            String
  referenceNumber String   @unique
  type            String   // "Person" or "Company"
  email           String
  phone           String
  address         String?
  website         String?
  industry        String?
  size            String?
  description     String?
  status          String   @default("Active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String

  // Relations
  createdBy       User     @relation("CompanyCreator", fields: [createdById], references: [id])
  contacts        CompanyContact[]
  documents       Document[]
  projects        Project[]
  contracts       Contract[]

  @@map("companies")
}

model CompanyContact {
  id        String  @id @default(cuid())
  name      String
  email     String
  phone     String?
  extension String?
  position  String?
  isPrimary Boolean @default(false)
  companyId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_contacts")
}

// Client Management
model Client {
  id              String   @id @default(cuid())
  referenceNumber String   @unique
  name            String
  isCorporate     String   // "Person" or "Company"
  leadSource      String
  rank            String   // "A", "B", "C", "VIP"
  email           String   @unique
  phone           String
  address         String?
  nationality     String?
  idNumber        String?
  passportNumber String?
  birthDate       DateTime?
  status          String   @default("Active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String

  // Relations
  createdBy       User     @relation("ClientCreator", fields: [createdById], references: [id])
  projects        Project[]
  contracts       Contract[]
  documents       Document[]

  @@map("clients")
}

// Task Management
model Task {
  id              String      @id @default(cuid())
  originalId      String?
  name            String
  referenceNumber String      @unique
  status          TaskStatus  @default(PENDING)
  priority        Priority    @default(MEDIUM)
  category        String
  description     String?
  owner           String
  assigneeId      String?
  creatorId       String
  timeline        DateTime[]
  planDays        Int?
  remarks         String?
  assigneeNotes   String?
  checklist       Boolean     @default(false)
  rating          Int?
  progress        Int         @default(0)
  color           String?
  location        String?
  plotNumber      String?
  community       String?
  projectType     String?
  projectFloor    String?
  developerProject String?
  dueDate         DateTime?
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  assignee        User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator         User        @relation("TaskCreator", fields: [creatorId], references: [id])
  project         Project?    @relation(fields: [projectId], references: [id])
  projectId       String?
  attachments     Attachment[]
  checklistItems  ChecklistItem[]
  subtasks        Subtask[]
  parentTask      Task?       @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  parentTaskId    String?
  childTasks      Task[]      @relation("TaskHierarchy")
  comments        TaskComment[]

  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Subtask {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      TaskStatus @default(PENDING)
  priority   Priority   @default(MEDIUM)
  assigneeId String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      String
  parentId    String?

  // Relations
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  parent      Subtask? @relation("SubtaskHierarchy", fields: [parentId], references: [id])
  children    Subtask[] @relation("SubtaskHierarchy")

  @@map("subtasks")
}

model Attachment {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  url         String
  createdAt   DateTime @default(now())
  taskId      String?

  // Relations
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model ChecklistItem {
  id        String   @id @default(cuid())
  text      String
  completed Boolean  @default(false)
  taskId    String

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("checklist_items")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  taskId    String
  userId    String

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

// Project Management
model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus @default(PLANNING)
  startDate       DateTime?
  endDate         DateTime?
  budget          Decimal?
  progress        Int           @default(0)
  priority        Priority      @default(MEDIUM)
  clientId        String?
  companyId       String?
  managerId       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  client          Client?       @relation(fields: [clientId], references: [id])
  company         Company?      @relation(fields: [companyId], references: [id])
  manager         User?         @relation("ProjectManager", fields: [managerId], references: [id])
  tasks           Task[]
  contracts       Contract[]
  documents       Document[]
  chatRooms       ChatRoom[]

  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Contract Management
model Contract {
  id              String        @id @default(cuid())
  contractNumber  String        @unique
  title           String
  description     String?
  type            String
  status          ContractStatus @default(DRAFT)
  startDate       DateTime?
  endDate         DateTime?
  value           Decimal?
  currency        String        @default("USD")
  terms           String?
  clientId        String?
  companyId       String?
  projectId       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  client          Client?       @relation(fields: [clientId], references: [id])
  company         Company?      @relation(fields: [companyId], references: [id])
  project         Project?      @relation(fields: [projectId], references: [id])
  documents       Document[]

  @@map("contracts")
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

// Document Management
model Document {
  id              String   @id @default(cuid())
  referenceCode   String   @unique
  module          String   // PRJ, HR, CLI, FIN, GEN
  entityCode      String
  documentType    String
  year            Int
  sequence        Int
  filename        String
  originalName    String
  mimeType        String
  size            Int
  path            String
  url             String
  description     String?
  uploadedById    String
  clientId        String?
  companyId       String?
  projectId       String?
  contractId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  uploadedBy      User     @relation(fields: [uploadedById], references: [id])
  client          Client?  @relation(fields: [clientId], references: [id])
  company         Company? @relation(fields: [companyId], references: [id])
  project         Project? @relation(fields: [projectId], references: [id])
  contract        Contract? @relation(fields: [contractId], references: [id])

  @@map("documents")
}

// Chat System
model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("project") // project, direct, group
  description String?
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  createdBy   User     @relation("ChatRoomCreator", fields: [createdById], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  members     User[]    @relation("ChatRoomMembers")
  messages    ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // text, image, file, system
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  userId    String

  // Relations
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   // task, system, reminder, alert
  isRead    Boolean  @default(false)
  data      Json?    // Additional data
  createdAt DateTime @default(now())
  userId    String

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Leave Management
model LeaveRequest {
  id          String      @id @default(cuid())
  type        String      // sick, vacation, personal, emergency
  startDate   DateTime
  endDate     DateTime
  days        Int
  reason      String?
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  comments    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  // Relations
  user        User        @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Employee Evaluation
model EmployeeEvaluation {
  id          String   @id @default(cuid())
  period      String   // Q1 2024, Annual 2024
  overallScore Int
  goals       Json     // Goals and achievements
  feedback    String?
  strengths   String[]
  improvements String[]
  nextGoals   String[]
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employeeId  String
  managerId   String

  // Relations
  employee    User     @relation("EmployeeEvaluation", fields: [employeeId], references: [id])
  manager     User     @relation("ManagerEvaluation", fields: [managerId], references: [id])

  @@map("employee_evaluations")
}

// IT Support Tickets
model SupportTicket {
  id          String   @id @default(cuid())
  ticketNumber String  @unique
  category    String   // Laptop/Desktop, Network/Internet, etc.
  priority    String   // Low, Medium, High
  subject     String
  description String
  status      String   @default("OPEN")
  deviceInfo  Json?    // Device information
  attachments Json?    // File attachments
  assignedTo  String?
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("support_tickets")
}


